{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    },
    {
      "source": "/en/winston-churchill-quotes",
      "destination": "/authors/winston-churchill-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/winston-churchill-quotes(?:/)?$"
    },
    {
      "source": "/tr/arthur-schopenhauer-sozleri",
      "destination": "/",
      "statusCode": 301,
      "regex": "^(?!/_next)/tr/arthur-schopenhauer-sozleri(?:/)?$"
    },
    {
      "source": "/tr/albert-einstein-sozleri",
      "destination": "/",
      "statusCode": 301,
      "regex": "^(?!/_next)/tr/albert-einstein-sozleri(?:/)?$"
    },
    {
      "source": "/tr/pablo-picasso-sozleri",
      "destination": "/",
      "statusCode": 301,
      "regex": "^(?!/_next)/tr/pablo-picasso-sozleri(?:/)?$"
    },
    {
      "source": "/en/benjamin-franklin-quotes",
      "destination": "/authors/benjamin-franklin-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/benjamin-franklin-quotes(?:/)?$"
    },
    {
      "source": "/benjamin-franklin-quotes",
      "destination": "/authors/benjamin-franklin-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/benjamin-franklin-quotes(?:/)?$"
    },
    {
      "source": "/en/mamatha-gandhi-quotes",
      "destination": "/authors/mamatha-gandhi-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/mamatha-gandhi-quotes(?:/)?$"
    },
    {
      "source": "/mamatha-gandhi-quotes",
      "destination": "/authors/mamatha-gandhi-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/mamatha-gandhi-quotes(?:/)?$"
    },
    {
      "source": "/en/michel-de-montaigne-quotes",
      "destination": "/michel-de-montaigne-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/michel-de-montaigne-quotes(?:/)?$"
    },
    {
      "source": "/en/charles-dickens-quotes",
      "destination": "/authors/charles-dickens-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/charles-dickens-quotes(?:/)?$"
    },
    {
      "source": "/charles-dickens-quotes",
      "destination": "/authors/charles-dickens-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/charles-dickens-quotes(?:/)?$"
    },
    {
      "source": "/en/socrates-quotes",
      "destination": "/socrates-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/socrates-quotes(?:/)?$"
    },
    {
      "source": "/socrates-quotes",
      "destination": "/authors/socrates-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/socrates-quotes(?:/)?$"
    },
    {
      "source": "/en/max-weber-quotes",
      "destination": "/authors/max-weber-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/max-weber-quotes(?:/)?$"
    },
    {
      "source": "/max-weber-quotes",
      "destination": "/authors/max-weber-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/max-weber-quotes(?:/)?$"
    },
    {
      "source": "/en/friedrich-nietzsche-quotes",
      "destination": "/authors/friedrich-nietzsche-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/friedrich-nietzsche-quotes(?:/)?$"
    },
    {
      "source": "/friedrich-nietzsche-quotes",
      "destination": "/authors/friedrich-nietzsche-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/friedrich-nietzsche-quotes(?:/)?$"
    },
    {
      "source": "/en/henry-ford-quotes",
      "destination": "/henry-ford-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/henry-ford-quotes(?:/)?$"
    },
    {
      "source": "/henry-ford-quotes",
      "destination": "/authors/henry-ford-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/henry-ford-quotes(?:/)?$"
    },
    {
      "source": "/en/pablo-picasso-quotes",
      "destination": "/authors/pablo-picasso-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/pablo-picasso-quotes(?:/)?$"
    },
    {
      "source": "/pablo-picasso-quotes",
      "destination": "/authors/pablo-picasso-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/pablo-picasso-quotes(?:/)?$"
    },
    {
      "source": "/en/bruce-lee-quotes",
      "destination": "/bruce-lee-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/bruce-lee-quotes(?:/)?$"
    },
    {
      "source": "/en/josef-stalin-quotes",
      "destination": "/josef-stalin-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/josef-stalin-quotes(?:/)?$"
    },
    {
      "source": "/en/albert-einstein-quotes",
      "destination": "/authors/albert-einstein-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/albert-einstein-quotes(?:/)?$"
    },
    {
      "source": "/albert-einstein-quotes",
      "destination": "/authors/albert-einstein-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/albert-einstein-quotes(?:/)?$"
    },
    {
      "source": "/en/voltaire-quotes",
      "destination": "/voltaire-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/voltaire-quotes(?:/)?$"
    },
    {
      "source": "/en/franz-kafka-quotes",
      "destination": "/authors/franz-kafka-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/franz-kafka-quotes(?:/)?$"
    },
    {
      "source": "/franz-kafka-quotes",
      "destination": "/authors/franz-kafka-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/franz-kafka-quotes(?:/)?$"
    },
    {
      "source": "/ralp-waldo-emerson-quotes",
      "destination": "/authors/ralph-waldo-emerson-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/ralp-waldo-emerson-quotes(?:/)?$"
    },
    {
      "source": "/en/nikola-tesla-quotes",
      "destination": "/authors/nikola-tesla-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/nikola-tesla-quotes(?:/)?$"
    },
    {
      "source": "/nikola-tesla-quotes",
      "destination": "/authors/nikola-tesla-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/nikola-tesla-quotes(?:/)?$"
    },
    {
      "source": "/en/winston-churchill-quotes",
      "destination": "/winston-churchill-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/winston-churchill-quotes(?:/)?$"
    },
    {
      "source": "/en/abraham-lincoln-quotes",
      "destination": "/authors/abraham-lincoln-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/abraham-lincoln-quotes(?:/)?$"
    },
    {
      "source": "/abraham-lincoln-quotes",
      "destination": "/authors/abraham-lincoln-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/abraham-lincoln-quotes(?:/)?$"
    },
    {
      "source": "/en/steve-jobs-quotes",
      "destination": "/authors/steve-jobs-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/steve-jobs-quotes(?:/)?$"
    },
    {
      "source": "/steve-jobs-quotes",
      "destination": "/authors/steve-jobs-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/steve-jobs-quotes(?:/)?$"
    },
    {
      "source": "/en/amelia-barr-quotes",
      "destination": "/authors/amelia-barr-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/en/amelia-barr-quotes(?:/)?$"
    },
    {
      "source": "/amelia-barr-quotes",
      "destination": "/authors/amelia-barr-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/amelia-barr-quotes(?:/)?$"
    },
    {
      "source": "/virginia-woolf-quotes",
      "destination": "/authors/virginia-woolf-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/virginia-woolf-quotes(?:/)?$"
    },
    {
      "source": "/wolfgang-amadeus-mozart-quotes",
      "destination": "/authors/wolfgang-amadeus-mozart-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/wolfgang-amadeus-mozart-quotes(?:/)?$"
    },
    {
      "source": "/michel-de-montaigne-quotes",
      "destination": "/authors/michel-de-montaigne-quotes",
      "statusCode": 301,
      "regex": "^(?!/_next)/michel-de-montaigne-quotes(?:/)?$"
    }
  ],
  "headers": [],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [
    {
      "page": "/authors/[slug]",
      "regex": "^/authors/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPslug": "nxtPslug"
      },
      "namedRegex": "^/authors/(?<nxtPslug>[^/]+?)(?:/)?$"
    },
    {
      "page": "/preverbs/[slug]",
      "regex": "^/preverbs/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPslug": "nxtPslug"
      },
      "namedRegex": "^/preverbs/(?<nxtPslug>[^/]+?)(?:/)?$"
    },
    {
      "page": "/words/[slug]",
      "regex": "^/words/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPslug": "nxtPslug"
      },
      "namedRegex": "^/words/(?<nxtPslug>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/authors",
      "regex": "^/authors(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/authors(?:/)?$"
    },
    {
      "page": "/data/words",
      "regex": "^/data/words(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/data/words(?:/)?$"
    },
    {
      "page": "/favicon.ico",
      "regex": "^/favicon\\.ico(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/favicon\\.ico(?:/)?$"
    },
    {
      "page": "/preverbs",
      "regex": "^/preverbs(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/preverbs(?:/)?$"
    },
    {
      "page": "/robots.txt",
      "regex": "^/robots\\.txt(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/robots\\.txt(?:/)?$"
    },
    {
      "page": "/sitemap.xml",
      "regex": "^/sitemap\\.xml(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/sitemap\\.xml(?:/)?$"
    },
    {
      "page": "/words",
      "regex": "^/words(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/words(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "rsc",
    "varyHeader": "rsc, next-router-state-tree, next-router-prefetch, next-router-segment-prefetch",
    "prefetchHeader": "next-router-prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "next-router-segment-prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}